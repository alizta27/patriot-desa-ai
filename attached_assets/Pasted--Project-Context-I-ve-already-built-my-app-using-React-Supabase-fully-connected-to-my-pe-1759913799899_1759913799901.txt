# 🧠 Project Context

I’ve already built my app using **React + Supabase**, fully connected to my personal Supabase project.  
I already created some **Supabase Edge Functions**, and I want you to **follow exactly how I created them before** (same file structure, conventions, and style).

The app has two main sides:
1. **Admin Dashboard** – used to control data, settings, and management features.
2. **Main Client Side** – used by regular users and connected to data managed by the admin.

Currently, some features — both on the **admin side** and the **client side** — are not yet fully integrated with APIs or Supabase Edge Functions. Some client components are also not yet properly synced with admin controls.

---

# 🎯 Task for Replit AI

1. **Analyze my entire codebase**, including:
   - The `admin` section (dashboard pages, components, and logic)
   - The `client` or `main` user-facing components and pages
   - Any shared hooks, context, or service files

2. Identify:
   - Which parts are **not connected** to Supabase or any Edge Function.
   - Which features should be **controlled or updated via Admin settings**, but are not properly linked yet.
   - Any **client-side logic** that depends on admin-side data but is currently not fetching or updating through APIs.

3. For every missing or incomplete integration:
   - **Create or update Supabase Edge Functions** following the **exact same structure and pattern** I already use.
   - Make sure new functions fit seamlessly into the existing folder structure.
   - **Update the frontend code** (both Admin and Client) to integrate these APIs using **React Query**.

---

# ⚙️ Implementation Rules

- Follow my **existing Edge Function structure and coding style**.
- Use **TypeScript** if the project already uses it.
- All database operations must use the **Supabase SDK**.
- Return consistent **JSON responses** with `status`, `message`, and `data`.
- Include proper **CORS headers** (same as my existing functions).
- For Admin-only operations, include **role validation or access checks**.
- Use **React Query** for all frontend data fetching and mutations, following my current project’s pattern:
  - Query keys like `['users']`, `['posts']`, `['settings']`, etc.
  - Hook names like `useUsersQuery`, `useUpdateSettingsMutation`, etc.
  - Keep the same style of error handling and toast notifications I already use.

---

# 🔄 Integration Scope

Make sure that:
- Admin changes (e.g. updating settings, managing data, toggling visibility, etc.) are properly **reflected on the client side**.
- Client-side views and behaviors dynamically update based on Admin configurations.
- Both Admin and Client components use consistent **React Query states** and **API calls** for data sync.

---

# ✅ Expected Output

- A summary of missing or incomplete integrations across **Admin and Client** sides.
- The new or updated **Supabase Edge Function files**, following my existing patterns.
- Updated **React Query hooks** and frontend API calls for both Admin and Client sides.
- A short explanation of:
  - What was missing before
  - What changes were made
  - How each integration now connects Admin and Client features together

---

# 📘 Reminder

- I **already have Edge Functions** — just **follow exactly how I created them**.
- I **already use React Query** — follow **the same structure, naming, and pattern**.
- Do **not** introduce new folder structures, frameworks, or code styles.
- Keep everything consistent and clean.
